#!/usr/bin/env bash

script_dir="$(dirname "${BASH_SOURCE[0]}")"
tmp_dir="${script_dir}/tmp"

function check_null {
  local var_name="$1"
  local var_value="${!var_name:-}"
  if [[ -z "$var_value" ]]; then
    echo "The environment variable $var_name must be set."
    exit 1
  fi
}

# Read a plugin property of type [array, string] into a Bash array. Buildkite
# exposes a string value at BUILDKITE_PLUGIN_{NAME}_{KEY}, and array values at
# BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}.
function read_list_property {
  local prefix="BUILDKITE_PLUGIN_DYNAMODB_IMAGE_${1}"
  local property="${prefix}_0"
  result=()
  if [[ -n ${!property:-} ]]; then
    local i=0
    local property="${prefix}_${i}"
    while [[ -n ${!property:-} ]]; do
      result+=("${!property}")
      i=$((i + 1))
      property="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    result+=("${!prefix}")
  fi
  [[ ${#result[@]} -gt 0 ]] || return 1
}

# Read tables into an array
function read_tables {
  if read_list_property 'TABLES'; then
    for table in "${result[@]}"; do
      tables+=("${table}")
    done
  else
    echo "A list of tables must be provided."
    exit 1
  fi
}

# This is only used to test the read_tables function
function read_tables_with_output {
  read_tables
  echo "${tables[@]}" 
}

# Retrieves schemas for a list of tables and saves them as JSON
function retrieve_schemas {
  local tables=("$@")
  for table in "${tables[@]}"; do
    local schema_file="${tmp_dir}/${table}.json"
    local dynamo_json
    dynamo_json=$(aws dynamodb describe-table \
      --table-name "${table}" \
      --output json)
    echo "${dynamo_json}"
    echo "${dynamo_json}" > "${schema_file}"
  done
}

# Reads a describe-table JSON and converts it to a create-table JSON
function generate_create_json {
  local input_json_file="$1"
  echo $(jq '.Table | {TableName, KeySchema, AttributeDefinitions} + (try {LocalSecondaryIndexes: [ .LocalSecondaryIndexes[] | {IndexName, KeySchema, Projection} ]} // {}) + (try {GlobalSecondaryIndexes: [ .GlobalSecondaryIndexes[] | {IndexName, KeySchema, Projection} ]} // {}) + {BillingMode: "PAY_PER_REQUEST"}' "${input_json_file}")
}