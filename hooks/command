#!/usr/bin/env bash

set -euo pipefail

export DOCKER_CLI_EXPERIMENTAL=enabled
export AWS_PAGER=""

function check_null {
  local var_name="$1"
  local var_value="${!var_name:-}"
  if [[ -z "$var_value" ]]; then
    echo "The environment variable $var_name must be set."
    exit 1
  fi
}

check_null BUILDKITE_BUILD_NUMBER
check_null BUILDKITE_BRANCH
check_null BUILDKITE_PIPELINE_DEFAULT_BRANCH

build="${BUILDKITE_BUILD_NUMBER:-}"
repository="$BUILDKITE_PLUGIN_DYNAMODB_IMAGE_REPOSITORY"
tables=()
script_dir="$(dirname "${BASH_SOURCE[0]}")"
local_dynamo_container_id=""
local_dynamo_port=8000
tmp_dir="${script_dir}/tmp"
mkdir -p "${tmp_dir}"

# Read a plugin property of type [array, string] into a Bash array. Buildkite
# exposes a string value at BUILDKITE_PLUGIN_{NAME}_{KEY}, and array values at
# BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}.
function read_list_property {
  local prefix="BUILDKITE_PLUGIN_DYNAMODB_IMAGE_${1}"
  local property="${prefix}_0"
  result=()
  if [[ -n ${!property:-} ]]; then
    local i=0
    local property="${prefix}_${i}"
    while [[ -n ${!property:-} ]]; do
      result+=("${!property}")
      i=$((i + 1))
      property="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    result+=("${!prefix}")
  fi
  [[ ${#result[@]} -gt 0 ]] || return 1
}

# Read tables into an array
function read_tables {
  if read_list_property 'TABLES'; then
    for table in "${result[@]}"; do
      tables+=("${table}")
    done
  else
    echo "A list of tables must be provided."
  fi
}

# Retrieves schemas and saves them as JSON
function retrieve_schemas {
  for table in "${tables[@]}"; do
    local schema_file="${tmp_dir}/${table}.json"
    aws dynamodb describe-table \
      --table-name "${table}" \
      --output json \
      >"${schema_file}"
  done
}

# Pulls local DynamoDB and runs it on port 8000
function start_local_dynamo {
  docker pull amazon/dynamodb-local:latest
  local_dynamo_container_id=$(docker run -d -p 0:"${local_dynamo_port}" amazon/dynamodb-local:latest -jar DynamoDBLocal.jar -port "${local_dynamo_port}" -sharedDb)
  sleep 5 # TODO: This gives the container a bit of time to start up, but it would be better to poll for when its up instead
}

# Saves the database file so that we can use it in the build
function save_database {
  docker cp "${local_dynamo_container_id}":/home/dynamodblocal/shared-local-instance.db "${tmp_dir}"/shared-local-instance.db
}

# Stop running local dynamo
function stop_local_dynamo {
  docker stop "${local_dynamo_container_id}"
}

# Create the tables in the local Dynamo image
function create_tables {
  local local_dynamo_endpoint
  local_dynamo_endpoint=$(docker port "${local_dynamo_container_id}" "${local_dynamo_port}")
  for table in "${tables[@]}"; do
    local schema_file table_json
    schema_file="${tmp_dir}/${table}.json"
    table_json=$(jq '.Table | {TableName, KeySchema, AttributeDefinitions} + (try {LocalSecondaryIndexes: [ .LocalSecondaryIndexes[] | {IndexName, KeySchema, Projection} ]} // {}) + (try {GlobalSecondaryIndexes: [ .GlobalSecondaryIndexes[] | {IndexName, KeySchema, Projection} ]} // {}) + {BillingMode: "PAY_PER_REQUEST"}' "${schema_file}")
    aws dynamodb create-table \
      --cli-input-json "${table_json}" \
      --region "local" --endpoint http://"${local_dynamo_endpoint}"
  done
  aws dynamodb list-tables --region "local" --endpoint http://"${local_dynamo_endpoint}"
}

# Builds the multi-arch image and publishes it
function build_and_publish {
  cd "${script_dir}"
  docker buildx create --use
  if [[ ${BUILDKITE_BRANCH} == "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}" ]]; then
    image="${repository}:latest"
  else
    image="${repository}:branch-${build}"
  fi

  local dynamo_port
  dynamo_port="${BUILDKITE_PLUGIN_DYNAMODB_IMAGE_PORT:-8000}"

  docker buildx build --push --no-cache -t "${image}" -f "${script_dir}"/Dockerfile --platform linux/arm64,linux/amd64 --build-arg PORT="${dynamo_port}" .
  docker buildx rm
}

read_tables
echo "1. Retrieve schemas..."
retrieve_schemas
echo "2. Create database file..."
start_local_dynamo
create_tables
save_database
stop_local_dynamo
echo "3. Build and publish multi-arch images..."
build_and_publish
